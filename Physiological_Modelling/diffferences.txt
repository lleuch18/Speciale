  # -*- coding: utf-8 -*-

  """

- Created on Mon Sep 25 11:35:19 2023

+ Created on Thu Oct  5 10:36:55 2023

  

  @author: Lasse

  """

  

- import circadapt

- import circadapt.plot

- from circadapt.model import Model

- from circadapt.adapt import ModelAdapt

- from circadapt.plot import triseg2022, mmode

- import matplotlib.pyplot as plt

- import numpy as np

- 

- 

- 

- class PPV_Model(Model, ModelAdapt):

?       -- ^^^^^^

+ class VanOsta2023(Model, ModelAdapt):

?        ^^^^^^^^^^

      def __init__(self,

                   solver: str = None,

                   path_to_circadapt: str = None,

                   model_state: dict = None,

                   ):

          if solver is None:

              solver = 'backward_differential'

  

          self._local_save_reference = True

+ 

          ModelAdapt.__init__(self)

          Model.__init__(self,

                         solver,

                         path_to_circadapt=path_to_circadapt,

                         model_state=model_state,

                         )

  

-         def build(self):

? ----

+     def build(self):

-             # Circulation

-             # Artven is a connector object (allowing bloodflow from proximal to

-             # distal node)

-             self.add_smart_component('ArtVen', build='SystemicCirculation')

? ----

+         self.add_smart_component('ArtVen', build='SystemicCirculation')

-             self.add_smart_component('ArtVen', build='PulmonaryCirculation')

? ----

+         self.add_smart_component('ArtVen', build='PulmonaryCirculation')

-             # Patch2022 is mycoardical tissue, with a set area, volume,

-             # sarcomere length, Stress Coefficient and Contraction- Relaxation

-             # Constants among other properties

-             self.add_smart_component('Heart', patch_type='Patch2022')

? ----

+         self.add_smart_component('Heart', patch_type='Patch2022')

-             # #### TODO: DOCUMENT TIMINGS AND PRESSUREFLOWCONTROL ####

-             self.add_smart_component('Timings')

? ----

+         self.add_smart_component('Timings')

-             self.add_smart_component('PressureFlowControl')

? ----

+         self.add_smart_component('PressureFlowControl')

  

-             # Manually set papillary muscles

-             # set_component receives parameters of a compnent, and the compnnet

-             # to link it to.

-             # Case: Papillary muscles in right heart, receive RV wall of triseg

-             self.set_component("Peri.RaRv.wPapMus", "Peri.Triseg.wRv")

? ----                                                         ^

+         self.set_component("Peri.RaRv.wPapMus", "Peri.TriSeg.wRv")

?                                                          ^

-             self.set_component("Peri.LaLv.wPapMus", "Peri.TriSeg.wLv")

? ----

+         self.set_component("Peri.LaLv.wPapMus", "Peri.TriSeg.wLv")

  

-         def set_reference(self):

? ----

+     def set_reference(self):

-             # When bickling is false, wall tension can be below zero

-             self['Chamber2022']['buckling'] = False

? ----

+         self['Chamber2022']['buckling'] = False

-             # Valves are orifices connecting atrium to ventricle, or ventricle 

-             # to artery (atrioventricular or ventriculo-arterial)

-             # #####NOTE: RESEARCH WHAT SOT-CLOSURE MEANS####

-             self['Valve2022']['soft_closure'] = True

? ----

+         self['Valve2022']['soft_closure'] = True

-             # Enables papillary muscles 

-             self['Valve2022']['papillary_muscles'] = True

? ----

+         self['Valve2022']['papillary_muscles'] = True

  

-             # Solver parameters

-             # Set timestep 0.001S

-             self['Solver']['dt'] = 0.001

? ----

+         self['Solver']['dt'] = 0.001

-             # #####TODO##### research function of dt_export

-             self['Solver']['dt_export'] = 0.002

? ----

+         self['Solver']['dt_export'] = 0.002

-             # Set 2nd order backwards differentiation

-             self.set('Solver.order', 2)

? ----

+         self.set('Solver.order',  2)

?                                  +

  

-             # Length of cardiac cycle in seconds

-             self.set('Model.t_cycle', 0.85)

? ----

+         self.set('Model.t_cycle', 0.85)

  

-             # Fractional area change

-             self.set('Model.PFC.fac', 0.5)

? ----

+         self.set('Model.PFC.fac',  0.5)

?                                   +

-             # ####TODO RESEARCH MEANING OF EPSILON, FAC_PFC and STABLE THRESHOLD####

-             self.set('Model.PFC.epsilon', 0.1)

? ----

+         self.set('Model.PFC.epsilon', 0.1)

-             self.set('Model.PFC.fac_pfc', 1)

? ----

+         self.set('Model.PFC.fac_pfc', 1)

-             self.set('Model.PFC.stable_threshold', 0.001)

? ----

+         self.set('Model.PFC.stable_threshold', 0.001)

  

+ 

-             # Set parameter circulation

-             # Tube0D simulates pressure-volume relationships of vessels

-             # A0 is the cross sectional cavity area at p=p0

-             self['Tube0D']['A0'] = [0.0004982, 0.00049959, 0.00045184,

? ----

+         self['Tube0D']['A0'] = [0.0004982 , 0.00049959, 0.00045184, 0.00051768]

?                                          +                         ++++++++++++

-                                     0.00051768]

-             # Cross-sectional area of wall

-             self['Tube0D']['A_wall'] = [1.13597208e-04, 3.79106863e-05,

? ----

+         self['Tube0D']['A_wall'] = [1.13597208e-04, 3.79106863e-05, 8.91394588e-05, 4.26698697e-05]

?                                                                    ++++++++++++++++++++++++++++++++

-                                         8.91394588e-05, 4.26698697e-05]

-             # Stifness coefficient of the wall (how much force is generated by

-             # a displacement)

-             self['Tube0D']['k'] = [1.66666667, 2.33333333, 1., 2.33333333]

? ----

+         self['Tube0D']['k'] = [1.66666667, 2.33333333, 1.        , 2.33333333]

?                                                          ++++++++

-             # Length of the tube

-             self['Tube0D']['l'] = [0.4, 0.4, 0.1, 0.1]

? ----

+         self['Tube0D']['l'] = [0.4, 0.4, 0.1, 0.1]

-             # Pressure at A = A0

-             self['Tube0D']['p0'] = [12154.79898845,   213.26733196,

? ----

+         self['Tube0D']['p0'] = [12154.79898845,   213.26733196,  1913.05480512,   600.72294959]

?                                                                ++++++++++++++++++++++++++++++++

-                                      1913.05480512,   600.72294959]

  

-             # ArtVen conncets two nodes with a passive, flow-

-             # dependent resistance

-             # p0 = reference pressure at q=q0

-             self['ArtVen']['p0'] = [6345.26731406,  950.        ]

? ----

+         self['ArtVen']['p0'] = [6345.26731406,  950.        ]

-             # q0 = Reference flow at p=p0

-             self['ArtVen']['q0'] = [4.5e-05, 4.5e-05]

? ----

+         self['ArtVen']['q0'] = [4.5e-05, 4.5e-05]

-             # k = exponent in pressure-flow relationship

-             self['ArtVen']['k'] = [1., 1.72]

? ----

+         self['ArtVen']['k'] = [1.  , 1.72]

?                                  ++

  

-             # Set volume state variables

  

-             if True:

? ----

+         if True:

-                 # Systemic artery and vein

-                 self.set('Model.SyArt.V', 2e-4)

? ----

+             self.set('Model.SyArt.V', 2e-4)

-                 self.set('Model.SyVen.V', 4e-4)

-                 # Pulmonary artery and vein

-                 self.set('Model.PuArt.V', 1e-4)

? ----

+             self.set('Model.PuArt.V', 1e-4)

+             self.set('Model.SyVen.V', 4e-4)

-                 self.set('Model.PuVen.V', 2e-4)

? ----

+             self.set('Model.PuVen.V', 2e-4)

  

-             # all wall parameters

-             # Length of the series of elastic elements, i.e. ls-lsi for which

-             # stress is zero

+             self.set('Model.Peri.TriSeg.V', 56e-6)

+             self.set('Model.Peri.TriSeg.Y', 36e-3)

+ 

+             self.set('Model.Peri.TriSeg.cLv.V',  150e-6)

+             self.set('Model.Peri.TriSeg.cRv.V',  110e-6)

+             self.set('Model.Peri.La.V',  25e-6)

+             self.set('Model.Peri.Ra.V',  150e-6)

+ 

+ 

-             self['Patch2022']['l_se'] = 0.04

? ----

+         self['Patch2022']['l_se'] = 0.04

-             # ????

-             self['Patch2022']['l_s_ref'] = 2.0

? ----

+         self['Patch2022']['l_s_ref'] = 2.0

-             # Reference sarcomere length at which reference wall area is

-             # applicable

-             self['Patch2022']['l_s0'] = 1.8

? ----

+         self['Patch2022']['l_s0'] = 1.8

-             # ?????

-             self['Patch2022']['dl_s_pas'] = 0.6

? ----

+         self['Patch2022']['dl_s_pas'] = 0.6

-             # Nonlinear exponent extra-cellular-matrix stress coefficient

-             self['Patch2022']['k1']

? ----

+         self['Patch2022']['k1'] = 10

?                                +++++

-             # Activation delay relative to intrinsic activation

-             self['Patch2022']['dt'] = 0

? ----

+         self['Patch2022']['dt'] = 0

-             # Contractility at rest

-             self['Patch2022']['C_rest']

? ----

+         self['Patch2022']['C_rest'] = 0

?                                    ++++

-             # Reference sarcomere length at zero-active-stress

-             self['Patch2022']['l_si0']

? ----

+         self['Patch2022']['l_si0'] = 1.51

?                                   +++++++

-             # length dependent activation duration

-             self['Patch2022']['LDAD'] = [1.057, 1.057, 0.64, 0.64, 0.64]

? ----

+         self['Patch2022']['LDAD'] = [1.057, 1.057, 0.64 , 0.64 , 0.64 ]

?                                                        +      +      +

-             # Activation during offset

-             self['Patch2022']['ADO'] = [0.65, 0.65, 0.75, 0.75, 0.75]

? ----

+         self['Patch2022']['ADO'] = [0.65, 0.65, 0.75, 0.75, 0.75]

-             # Length dependent contractility coefficient

-             self['Patch2022']['LDCC'] = [4, 4, 3.2, 3.2, 3.2]

? ----

+         self['Patch2022']['LDCC'] = [4. , 4. , 3.2, 3.2, 3.2]

?                                       ++   ++

-             # Max shortening velocity

-             self['Patch2022']['v_max'] = 7

? ----

+         self['Patch2022']['v_max'] = 7.

?                                       +

-             self['Patch2022']['v_max'][:2] = 14

? ----

+         self['Patch2022']['v_max'][:2] = 14.

?                                            +

  

-             # Contraction time constant

-             self['Patch2022']['tr'] = [0.4, 0.4, 0.24, 0.24, 0.24]

? ----

+         self['Patch2022']['tr'] = [0.4 , 0.4 , 0.24, 0.24, 0.24]

?                                       +     +

-             self['Patch2022']['td'] = [0.4, 0.4, 0.23, 0.23, 0.23]

? ----

+         self['Patch2022']['td'] = [0.4 , 0.4 , 0.23, 0.23, 0.23]

?                                       +     +

  

+ 

-             # Wall specific

-             # Linear active stress coefficient

-             self['Patch2022']['Sf_act'] = [80e3, 80e3, 120e3, 120e3, 120e3]

? ----

+         self['Patch2022']['Sf_act'] = [80e3, 80e3, 120e3, 120e3, 120e3]

-             # The wall area at the reference sarcomere length

-             self['Patch2022']['Am_ref'] = [0.00458522, 0.00381765, 0.00806997, 0.00454307, 0.01176514]

? ----

+         self['Patch2022']['Am_ref'] = [0.00458522, 0.00381765, 0.00806997, 0.00454307, 0.01176514]

-             # Volume of the wall

-             self['Patch2022']['V_wall'] = [2.75050615e-05, 1.25959326e-05, 8.80910385e-05, 3.46281364e-05,

? ----

+         self['Patch2022']['V_wall'] = [2.75050615e-05, 1.25959326e-05, 8.80910385e-05, 3.46281364e-05,

                 5.16086110e-05]

-             # Linear ECM stress coefficient

-             self['Patch2022']['Sf_pas'] = [ 16.51117993,  17.0639141 , 580.39235927, 569.67392472,

? ----

+         self['Patch2022']['Sf_pas'] = [ 16.51117993,  17.0639141 , 580.39235927, 569.67392472,

                 606.50514861]

+ 

+ 

-             

-             # Valves

-             # ###PRESUMEABLY FAC = FRACTIONAL AREA CHANGE###

-             self['Valve2022']['adaptation_A_open_fac'] = [1.  , 1.11, 1.  , 1.  , 1.11, 1.  ]

? ----

+         self['Valve2022']['adaptation_A_open_fac'] = [1.  , 1.11, 1.  , 1.  , 1.11, 1.  ]

-             # Opening Area

-             self['Valve2022']['A_open'] = [0.00050042, 0.00050203, 0.00045228, 0.00051764, 0.00055321,

? ----

+         self['Valve2022']['A_open'] = [0.00050042, 0.00050203, 0.00045228, 0.00051764, 0.00055321,

                 0.00049838]

-             # Leaking valve area

-             self['Valve2022']['A_leak'] = [2.64705882e-04, 2.64705882e-10, 2.64705882e-10, 2.64705882e-04,

? ----

+         self['Valve2022']['A_leak'] = [2.64705882e-04, 2.64705882e-10, 2.64705882e-10, 2.64705882e-04,

                 2.64705882e-10, 2.64705882e-10]

-             # Valve length

-             self['Valve2022']['l'] = 0.01626978

? ----

+         self['Valve2022']['l'] = 0.01626978

-             # blood Vicocity

-             self['Valve2022']['rho_b'] = 1050

? ----

+         self['Valve2022']['rho_b'] = 1050

-             # Determines state of papillary muscle activation

-             self['Valve2022']['papillary_muscles'] = True

? ----

+         self['Valve2022']['papillary_muscles'] = True

-             # Factors in the mathematical formular for papillary muscle activation

-             self['Valve2022']['papillary_muscles_slope'] = 100

? ----

+         self['Valve2022']['papillary_muscles_slope'] = 100

-             self['Valve2022']['papillary_muscles_min'] = 0.1

? ----

+         self['Valve2022']['papillary_muscles_min'] = 0.1

-             self['Valve2022']['papillary_muscles_A_open_fac'] = 0.1

? ----

+         self['Valve2022']['papillary_muscles_A_open_fac'] = 0.1

-             # #####TODO: ADD SOFT CLOSURE DOCUMENTATION####

-             self['Valve2022']['soft_closure'] = True

? ----

+         self['Valve2022']['soft_closure'] = True

+ 

-             

-             # Simulates the pericardium

-             # Nonlinear exponent

-             self['Bag']['k'] = 10

? ----

+         self['Bag']['k'] = 10

-             # Reference volume, given the reference pressure

-             self['Bag']['V_ref'] = [0.00051698]

? ----                                        -

+         self['Bag']['V_ref'] = [0.00051968]

?                                        +

-             # Reference pressure at the given reference volume

-             self['Bag']['p_ref'] = 100

? ----

+         self['Bag']['p_ref'] = 100

+ 

-             

-             # Distance of wall junction to center

-             self.set('Model.Peri.TriSeg.Y', 0.035)

? ----

+         self.set('Model.Peri.TriSeg.Y', 0.035)

+ 

-             

-             # ####TODO: DOCUMENT TIMIN COMPONENT####

-             self['Timings']['law_tauAv'] = 2

? ----

+         self['Timings']['law_tauAv'] = 2

-             self['Timings']['c_tauAv0'] = 0.172

? ----

+         self['Timings']['c_tauAv0'] = 0.172

-             self['Timings']['c_tauAv1'] = -0.485*60e-3

? ----

+         self['Timings']['c_tauAv1'] = -0.485*60e-3

+ 

+ 

-             

-             # Adaptation

-             # ###TODO: DOCUMENT ADAPTATION CONSTANT###

-             self['Patch2022']['adapt_gamma'] = 0.5

? ----

+         self['Patch2022']['adapt_gamma'] = 0.5

-             # How many beats are stored in the solver at a time

-             self.set('Solver.store_beats', 1)

? ----

+         self.set('Solver.store_beats', 1)

+ 

-             

-             # One of the global functions for CircAapt (the other being timings)

-             # ###TODO: ADD DOCUMENTATION ON PRESSUREFLOWCONTROL###

-             self['PressureFlowControl']['stable_threshold'] = 1e-3

? ----

+         self['PressureFlowControl']['stable_threshold'] = 1e-3

+ 

-             

-             # Maximum stress on the Extra Cellular Matrix

-             self['Patch2022']['SfPasMaxT'] = [6400., 6400.,  6600.,  6600.,  6600.]

? ----

+         self['Patch2022']['SfPasMaxT'] = [6400., 6400.,  6600.,  6600.,  6600.]

-             # TODO Active Stress

-             self['Patch2022']['FacSfActT'] = [0.44, 0.44, 0.61, 0.61, 0.61]

? ----

+         self['Patch2022']['FacSfActT'] = [0.44, 0.44, 0.61, 0.61, 0.61]

-             # TODO Active weighted passive stress

-             self['Patch2022']['SfPasActT'] = [4800., 4800., 6600., 6600., 6600.]

? ----

+         self['Patch2022']['SfPasActT'] = [4800., 4800., 6600., 6600., 6600.]

-             # Weighted sarcomere length average

-             self['Patch2022']['LsPasActT'] = [3.  , 3.  , 2.23, 2.23, 2.23]

? ----

+         self['Patch2022']['LsPasActT'] = [3.  , 3.  , 2.23, 2.23, 2.23]

+ 

-             

-             # Keeps running beats untill the model is haemodynamically stable

-             self.run(stable=True)

? ----

+         self.run(stable=True)

-             

+ 

-             return

? ----

+         return

+ 

+ 

-         

-             # Set adaptation options for the model

-             # Loads the default set of options, which can be modified for 

-             # either rest or excercise

-             options = self.get_adapt_options()

? ----

+         options = self.get_adapt_options()

-             # TODO Document exactly what is set at this line

-             self['General']['q0'] = options['exercise']['q0']

? ----

+         self['General']['q0'] = options['exercise']['q0']

-             # TODO same as above. Presumeably sets the cycle of a heartbeat in

-             # seconds to that of the exercise option

-             self['General']['t_cycle'] = options['exercise']['t_cycle']

? ----

+         self['General']['t_cycle'] = options['exercise']['t_cycle']

-             self.run(stable=True)

? ----

+         self.run(stable=True)

+ 

-             

-             # Sets references for stress on the ECM, Active & Passive stress,

-             # as well as sarcomere avg lngth

-             reference_y = np.array([

? ----

+         reference_y = np.array([

              self['Patch2022']['SfEcmMax'],

              self['Patch2022']['SfActMax'],

              self['Patch2022']['SfPasAct'],

              self['Patch2022']['LsPasAct'],

              ]).T

+ 

-             

-             # TODO Presumeably sets the targets which are to be reached for 

-             # Hemodynamic stability

-             targets = np.array([

? ----

+         targets = np.array([

              np.mean(reference_y[:2, :], axis=0),

              np.mean(reference_y[2:, :], axis=0),

              ])

-             targets[:, 1] /= self['Patch2022']['Sf_act'][:][[0, 2]]

? ----

+         targets[:, 1] /= self['Patch2022']['Sf_act'][:][[0, 2]]

+ 

+         # targets = np.array(

+         #     [[5.5e+05, 1.9e-01, 3.5e+03, 2.2e+00],

+         #      [6.0e+03, 4.9e-01, 4.0e+03, 2.3e+00],

-             

+         #      ])

?         +    ++++

+ 

-             

-             # Sets the new stress variables as the ones calculated in the 

-             # target array from the reference values set in the constructor

-             self['Patch2022']['SfPasMaxT'] = targets[[0, 0, 1, 1, 1], 0]

? ----

+         self['Patch2022']['SfPasMaxT'] = targets[[0, 0, 1, 1, 1], 0]

-             self['Patch2022']['FacSfActT'] = targets[[0, 0, 1, 1, 1], 1]

? ----

+         self['Patch2022']['FacSfActT'] = targets[[0, 0, 1, 1, 1], 1]

-             self['Patch2022']['SfPasActT'] = targets[[0, 0, 1, 1, 1], 2]

? ----

+         self['Patch2022']['SfPasActT'] = targets[[0, 0, 1, 1, 1], 2]

-             self['Patch2022']['LsPasActT'] = targets[[0, 0, 1, 1, 1], 3]

? ----

+         self['Patch2022']['LsPasActT'] = targets[[0, 0, 1, 1, 1], 3]

-             

+ 

-             self['Patch2022']['adapt_gamma'] = 0.1

? ----

+         self['Patch2022']['adapt_gamma'] = 0.1

-             self.adapt(verbose=True)

? ----

+         self.adapt(verbose=True)

-             self['Patch2022']['adapt_gamma'] = 0.5

? ----

+         self['Patch2022']['adapt_gamma'] = 0.5

-             self.adapt(verbose=True)

? ----

+         self.adapt(verbose=True)

-             

+ 

-             # Set adaptation constants

? ----

+         # Set adaptation constants

-             # TODO presumeably calculates the ECM

-             self.calculate_and_set_matrix(verbose=True)

? ----

+         self.calculate_and_set_matrix(verbose=True)

+ 

+         # set resting state

+         self['General']['q0'] = options['rest']['q0']

+         self['General']['t_cycle'] = options['rest']['t_cycle']

+         self.run(stable=True)

+ 

+     def get_unittest_targets(self):

+         """Hardcoded results after initializing and running 1 beat."""

+         return {

+             'LVEDV': 119.7,

+             'LVESV':  47.2,

-             

+             }

?             +

-             self['Patch2022']['adapt_gamma'] = 0.1

-             self.adapt(verbose=True)

-             self['Patch2022']['adapt_gamma'] = 0.5

-             self.adapt(verbose=True)

+ 

+     def get_unittest_results(self, model):

+         """Real-time results after initializing and running 1 beat."""

+         LVEDV = np.max(model['Cavity']['V'][:, 'cLv'])*1e6

+         LVESV = np.min(model['Cavity']['V'][:, 'cLv'])*1e6

+         return {

+             'LVEDV': LVEDV,

+             'LVESV': LVESV,

-             

+             }

?             +

+ 

-             def get_unittest_targets(self):

-                 """Hardcoded results after initializing and running 1 beat."""

-                 return {

-                     # Left Ventricle End Diastolic Volume

-                     'LVEDV': 119.7,

-                     # Left Ventricle End Systolic Volume

-                     'LVESV':  47.2,

-                     }

-             

-             def get_unittest_results(self, model):

-                 """Real-time results after initializing and running 1 beat."""

-                 LVEDV = np.max(model['Cavity']['V'][:, 'cLv'])*1e6

-                 LVESV = np.min(model['Cavity']['V'][:, 'cLv'])*1e6

-                 return {

-                     'LVEDV': LVEDV,

-                     'LVESV': LVESV,

-                     }

-             

-             def plot(self, fig=None):

? --------

+     def plot(self, fig=None):

-                     # TODO

+         # TODO

-                     self.plot_extended(fig)

? ------------

+         self.plot_extended(fig)

-             

+ 

-         def plot_extended(self, fig=None):

? ----

+     def plot_extended(self, fig=None):

-             if fig is None:

? ----

+         if fig is None:

-                 fig = 1

? ----

+             fig = 1

-             if isinstance(fig, int):

? ----

+         if isinstance(fig, int):

-                 fig = plt.figure(fig, clear=True, figsize=(12, 8))

? ----

+             fig = plt.figure(fig, clear=True, figsize=(12, 8))

-     

+ 

-             # Settings

? ----

+         # Settings

-             grid_size = [32, 32]

? ----

+         grid_size = [32, 32]

-                 

-                 

  

-             def get_lim(module, signal, locs=slice(None, None, None)):

? ----

+         def get_lim(module, signal, locs=slice(None, None, None)):

-                 """ Returns the limits for the given module, at the intended

-                     columns

-                 """

-                 signal = self[module][signal][:, locs]

? ----

+             signal = self[module][signal][:, locs]

-                 lim = np.array([np.min(signal), np.max(signal)])

? ----

+             lim = np.array([np.min(signal), np.max(signal)])

-                 lim += np.array([-1, 1]) * 0.1*np.diff(lim)

? ----

+             lim += np.array([-1, 1]) * 0.1*np.diff(lim)

-                 return lim

? ----

+             return lim

  

-             lim_V = get_lim('Cavity', 'V', ['cRv', 'Ra', 'La', 'cLv']) * 1e6

? ----

+         lim_V = get_lim('Cavity', 'V', ['cRv', 'Ra', 'La', 'cLv']) * 1e6

-             lim_V[0] = 0

? ----

+         lim_V[0] = 0

-             lim_p = get_lim('Cavity', 'p', ['cRv', 'Ra', 'La', 'cLv']) / 133

? ----

+         lim_p = get_lim('Cavity', 'p', ['cRv', 'Ra', 'La', 'cLv']) / 133

-             lim_p[0] = np.min([lim_p[0], 0])

? ----

+         lim_p[0] = np.min([lim_p[0], 0])

-             lim_Ls = get_lim('Patch2022', 'l_s')

? ----

+         lim_Ls = get_lim('Patch2022', 'l_s')

-             lim_Sf = get_lim('Patch2022', 'Sf') * 1e-3

? ----

+         lim_Sf = get_lim('Patch2022', 'Sf') * 1e-3

-             lim_q = get_lim('Valve2022', 'q',

? ----

+         lim_q = get_lim('Valve2022', 'q',

-                             ['LaLv', 'RaRv', 'LvSyArt', 'RaPuArt']) * 1e6

? ----

+                         ['LaLv', 'RaRv', 'LvSyArt', 'RaPuArt']) * 1e6

-     

+ 

-             all_lim = [lim_V, lim_p, lim_Ls, lim_Sf, lim_q]

? ----

+         all_lim = [lim_V, lim_p, lim_Ls, lim_Sf, lim_q]

-             if (np.any(np.isnan(all_lim)) or np.any(np.isinf(all_lim))):

? ----

+         if (np.any(np.isnan(all_lim)) or np.any(np.isinf(all_lim))):

-                 lim_V = [0, 200]

? ----

+             lim_V = [0, 200]

-                 lim_p = [0, 150]

? ----

+             lim_p = [0, 150]

-                 lim_Ls = [1.5, 2.0]

? ----

+             lim_Ls = [1.5, 2.0]

-                 lim_Sf = [0, 100]

? ----

+             lim_Sf = [0, 100]

-                 lim_q = [-1e-3, 1e-3]

? ----

+             lim_q = [-1e-3, 1e-3]

  

-            # Pressure Volume plot

? ---

+         # Pressure Volume plot

-             axPV = plt.subplot2grid(grid_size, (0, 17), rowspan=15, colspan=15, fig=fig)

? ----

+         axPV = plt.subplot2grid(grid_size, (0, 17), rowspan=15, colspan=15, fig=fig)

-             axPV.plot(self['Cavity']['V'][:, 'cLv']*1e6, self['Cavity']['p'][:, 'cLv']/133)

? ----

+         axPV.plot(self['Cavity']['V'][:, 'cLv']*1e6, self['Cavity']['p'][:, 'cLv']/133)

-             axPV.plot(self['Cavity']['V'][:, 'cRv']*1e6, self['Cavity']['p'][:, 'cRv']/133)

? ----

+         axPV.plot(self['Cavity']['V'][:, 'cRv']*1e6, self['Cavity']['p'][:, 'cRv']/133)

-             axPV.plot(self['Cavity']['V'][:, 'La']*1e6, self['Cavity']['p'][:, 'La']/133)

? ----

+         axPV.plot(self['Cavity']['V'][:, 'La']*1e6, self['Cavity']['p'][:, 'La']/133)

-             axPV.plot(self['Cavity']['V'][:, 'Ra']*1e6, self['Cavity']['p'][:, 'Ra']/133)

? ----

+         axPV.plot(self['Cavity']['V'][:, 'Ra']*1e6, self['Cavity']['p'][:, 'Ra']/133)

-             axPV.spines[['top', 'right']].set_visible(False)

? ----

+         axPV.spines[['top', 'right']].set_visible(False)

-             axPV.set_title('Pressure-Volume loop', weight='bold')

? ----

+         axPV.set_title('Pressure-Volume loop', weight='bold')

-             axPV.set_xlabel('Volume [mL]')

? ----

+         axPV.set_xlabel('Volume [mL]')

-             axPV.set_ylabel('Pressure [mmHg]')

? ----

+         axPV.set_ylabel('Pressure [mmHg]')

-             axPV.spines[['bottom', 'left']].set_position(('outward', 5))

? ----

+         axPV.spines[['bottom', 'left']].set_position(('outward', 5))

-     

+ 

-             ylabel_x_left = -0.25

? ----

+         ylabel_x_left = -0.25

-             ylabel_x_right = 1.25

? ----

+         ylabel_x_right = 1.25

-     

+ 

-             # Volumes

? ----

+         # Volumes

-             t = self['Solver']['t']*1e3

? ----

+         t = self['Solver']['t']*1e3

-             t -= t[0]

? ----

+         t -= t[0]

-     

+ 

-             axVRv = plt.subplot2grid(grid_size, (0, 0), rowspan=8, colspan=6, fig=fig)

? ----

+         axVRv = plt.subplot2grid(grid_size, (0, 0), rowspan=8, colspan=6, fig=fig)

-             axVRv.plot(t, self['Cavity']['V'][:, 'cRv']*1e6)

? ----

+         axVRv.plot(t, self['Cavity']['V'][:, 'cRv']*1e6)

-             axVRv.plot(t, self['Cavity']['V'][:, 'Ra']*1e6)

? ----

+         axVRv.plot(t, self['Cavity']['V'][:, 'Ra']*1e6)

-             axVRv.set_ylim(lim_V)

? ----

+         axVRv.set_ylim(lim_V)

-             axVRv.set_ylabel('Volume\n[mL]')

? ----

+         axVRv.set_ylabel('Volume\n[mL]')

-             axVRv.spines[['top', 'right']].set_visible(False)

? ----

+         axVRv.spines[['top', 'right']].set_visible(False)

-             axVRv.set_title('Right Heart')

? ----

+         axVRv.set_title('Right Heart')

-             # axVRv.set_xticks([])

? ----

+         # axVRv.set_xticks([])

-             axVRv.tick_params(axis='both', direction='in')

? ----

+         axVRv.tick_params(axis='both', direction='in')

-             axVRv.yaxis.set_label_coords(ylabel_x_left, 0.5)

? ----

+         axVRv.yaxis.set_label_coords(ylabel_x_left, 0.5)

-     

-     

+ 

+ 

-             axVLv = plt.subplot2grid(grid_size, (0, 6), rowspan=8, colspan=6, fig=fig)

? ----

+         axVLv = plt.subplot2grid(grid_size, (0, 6), rowspan=8, colspan=6, fig=fig)

-             axVLv.plot(t, self['Cavity']['V'][:, 'cLv']*1e6)

? ----

+         axVLv.plot(t, self['Cavity']['V'][:, 'cLv']*1e6)

-             axVLv.plot(t, self['Cavity']['V'][:, 'La']*1e6)

? ----

+         axVLv.plot(t, self['Cavity']['V'][:, 'La']*1e6)

-             axVLv.set_ylabel('Volume\n[mL]')

? ----

+         axVLv.set_ylabel('Volume\n[mL]')

-             axVLv.set_ylim(lim_V)

? ----

+         axVLv.set_ylim(lim_V)

-             axVLv.yaxis.set_ticks_position('right')

? ----

+         axVLv.yaxis.set_ticks_position('right')

-             axVLv.yaxis.set_label_position('right')

? ----

+         axVLv.yaxis.set_label_position('right')

-             axVLv.spines['right'].set_position(('outward', 0))

? ----

+         axVLv.spines['right'].set_position(('outward', 0))

-             axVLv.spines[['top', 'left']].set_visible(False)

? ----

+         axVLv.spines[['top', 'left']].set_visible(False)

-             axVLv.set_title('Left Heart')

? ----

+         axVLv.set_title('Left Heart')

-             # axVLv.set_xticks([])

? ----

+         # axVLv.set_xticks([])

-             axVLv.tick_params(axis='both', direction='in')

? ----

+         axVLv.tick_params(axis='both', direction='in')

-             axVLv.yaxis.set_label_coords(ylabel_x_right, 0.5)

? ----

+         axVLv.yaxis.set_label_coords(ylabel_x_right, 0.5)

-     

+ 

-             # Pressures

? ----

+         # Pressures

-             axpRv = plt.subplot2grid(grid_size, (8, 0), rowspan=8, colspan=6, fig=fig)

? ----

+         axpRv = plt.subplot2grid(grid_size, (8, 0), rowspan=8, colspan=6, fig=fig)

-             axpRv.plot(t, self['Cavity']['p'][:, 'cRv']/133)

? ----

+         axpRv.plot(t, self['Cavity']['p'][:, 'cRv']/133)

-             axpRv.plot(t, self['Cavity']['p'][:, 'Ra']/133)

? ----

+         axpRv.plot(t, self['Cavity']['p'][:, 'Ra']/133)

-             axpRv.plot(t, self['Cavity']['p'][:, 'PuArt']/133)

? ----

+         axpRv.plot(t, self['Cavity']['p'][:, 'PuArt']/133)

-             axpRv.spines[['top', 'right']].set_visible(False)

? ----

+         axpRv.spines[['top', 'right']].set_visible(False)

-             # axpRv.set_xticks([])

? ----

+         # axpRv.set_xticks([])

-             axpRv.tick_params(axis='both', direction='in')

? ----

+         axpRv.tick_params(axis='both', direction='in')

-             axpRv.set_ylim(lim_p)

? ----

+         axpRv.set_ylim(lim_p)

-             axpRv.set_ylabel('Pressure\n[mmHg]')

? ----

+         axpRv.set_ylabel('Pressure\n[mmHg]')

-             axpRv.yaxis.set_label_coords(ylabel_x_left, 0.5)

? ----

+         axpRv.yaxis.set_label_coords(ylabel_x_left, 0.5)

-     

+ 

-             axpLv = plt.subplot2grid(grid_size, (8, 6), rowspan=8, colspan=6, fig=fig)

? ----

+         axpLv = plt.subplot2grid(grid_size, (8, 6), rowspan=8, colspan=6, fig=fig)

-             axpLv.plot(t, self['Cavity']['p'][:, 'cLv']/133)

? ----

+         axpLv.plot(t, self['Cavity']['p'][:, 'cLv']/133)

-             axpLv.plot(t, self['Cavity']['p'][:, 'La']/133)

? ----

+         axpLv.plot(t, self['Cavity']['p'][:, 'La']/133)

-             axpLv.plot(t, self['Cavity']['p'][:, 'SyArt']/133)

? ----

+         axpLv.plot(t, self['Cavity']['p'][:, 'SyArt']/133)

-             axpLv.yaxis.set_ticks_position('right')

? ----

+         axpLv.yaxis.set_ticks_position('right')

-             axpLv.yaxis.set_label_position('right')

? ----

+         axpLv.yaxis.set_label_position('right')

-             axpLv.spines['right'].set_position(('outward', 0))

? ----

+         axpLv.spines['right'].set_position(('outward', 0))

-             axpLv.spines[['top', 'left']].set_visible(False)

? ----

+         axpLv.spines[['top', 'left']].set_visible(False)

-             # axpLv.set_xticks([])

? ----

+         # axpLv.set_xticks([])

-             axpLv.tick_params(axis='both', direction='in')

? ----

+         axpLv.tick_params(axis='both', direction='in')

-             axpLv.set_ylim(lim_p)

? ----

+         axpLv.set_ylim(lim_p)

-             axpLv.set_ylabel('Pressure\n[mmHg]')

? ----

+         axpLv.set_ylabel('Pressure\n[mmHg]')

-             axpLv.yaxis.set_label_coords(ylabel_x_right, 0.5)

? ----

+         axpLv.yaxis.set_label_coords(ylabel_x_right, 0.5)

-     

+ 

-             # Valves

? ----

+         # Valves

-             ax = plt.subplot2grid(grid_size, (16, 0), rowspan=6, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (16, 0), rowspan=6, colspan=6, fig=fig)

-             ax.plot(t, self['Valve2022']['q'][:, 'RaRv']*1e6)

? ----

+         ax.plot(t, self['Valve2022']['q'][:, 'RaRv']*1e6)

-             ax.plot(t, self['Valve2022']['q'][:, 'RvPuArt']*1e6)

? ----

+         ax.plot(t, self['Valve2022']['q'][:, 'RvPuArt']*1e6)

-             ax.spines[['top', 'right']].set_visible(False)

? ----

+         ax.spines[['top', 'right']].set_visible(False)

-             ax.set_ylim(lim_q)

? ----

+         ax.set_ylim(lim_q)

-             # ax.set_xticks([])

? ----

+         # ax.set_xticks([])

-             ax.set_ylabel('Flow\n[mL/s]')

? ----

+         ax.set_ylabel('Flow\n[mL/s]')

-             ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

-     

+ 

-             ax = plt.subplot2grid(grid_size, (16, 6), rowspan=6, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (16, 6), rowspan=6, colspan=6, fig=fig)

-             ax.plot(t, self['Valve2022']['q'][:, 'LaLv']*1e6)

? ----

+         ax.plot(t, self['Valve2022']['q'][:, 'LaLv']*1e6)

-             ax.plot(t, self['Valve2022']['q'][:, 'LvSyArt']*1e6)

? ----

+         ax.plot(t, self['Valve2022']['q'][:, 'LvSyArt']*1e6)

-             ax.spines[['top', 'left']].set_visible(False)

? ----

+         ax.spines[['top', 'left']].set_visible(False)

-             ax.set_ylim(lim_q)

? ----

+         ax.set_ylim(lim_q)

-             ax.yaxis.set_ticks_position('right')

? ----

+         ax.yaxis.set_ticks_position('right')

-             ax.yaxis.set_label_position('right')

? ----

+         ax.yaxis.set_label_position('right')

-             # ax.set_xticks([])

? ----

+         # ax.set_xticks([])

-             ax.set_ylabel('Flow\n[mL/s]')

? ----

+         ax.set_ylabel('Flow\n[mL/s]')

-             ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

-     

+ 

-             # Stress

? ----

+         # Stress

-             ax = plt.subplot2grid(grid_size, (22, 0), rowspan=4, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (22, 0), rowspan=4, colspan=6, fig=fig)

-             ax.plot(t, self['Patch2022']['Sf'][:, 'pRv0']*1e-3)

? ----

+         ax.plot(t, self['Patch2022']['Sf'][:, 'pRv0']*1e-3)

-             ax.plot(t, self['Patch2022']['Sf'][:, 'pRa0']*1e-3)

? ----

+         ax.plot(t, self['Patch2022']['Sf'][:, 'pRa0']*1e-3)

-             ax.spines[['top', 'right']].set_visible(False)

? ----

+         ax.spines[['top', 'right']].set_visible(False)

-             # ax.set_xticks([])

? ----

+         # ax.set_xticks([])

-             ax.set_ylim(lim_Sf)

? ----

+         ax.set_ylim(lim_Sf)

-             ax.set_ylabel('Total\nstress [kPa]')

? ----

+         ax.set_ylabel('Total\nstress [kPa]')

-             ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

-     

+ 

-             ax = plt.subplot2grid(grid_size, (22, 6), rowspan=4, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (22, 6), rowspan=4, colspan=6, fig=fig)

-             ax.plot(t, self['Patch2022']['Sf'][:, 'pLv0']*1e-3)

? ----

+         ax.plot(t, self['Patch2022']['Sf'][:, 'pLv0']*1e-3)

-             ax.plot(t, self['Patch2022']['Sf'][:, 'pSv0']*1e-3)

? ----

+         ax.plot(t, self['Patch2022']['Sf'][:, 'pSv0']*1e-3)

-             ax.plot(t, self['Patch2022']['Sf'][:, 'pLa0']*1e-3)

? ----

+         ax.plot(t, self['Patch2022']['Sf'][:, 'pLa0']*1e-3)

-             ax.spines[['top', 'left']].set_visible(False)

? ----

+         ax.spines[['top', 'left']].set_visible(False)

-             ax.yaxis.set_ticks_position('right')

? ----

+         ax.yaxis.set_ticks_position('right')

-             ax.yaxis.set_label_position('right')

? ----

+         ax.yaxis.set_label_position('right')

-             # ax.set_xticks([])

? ----

+         # ax.set_xticks([])

-             ax.set_ylim(lim_Sf)

? ----

+         ax.set_ylim(lim_Sf)

-             ax.set_ylabel('Total\nstress [kPa]')

? ----

+         ax.set_ylabel('Total\nstress [kPa]')

-             ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

-     

+ 

-             # Sarcomere Length

? ----

+         # Sarcomere Length

-             ax = plt.subplot2grid(grid_size, (26, 0), rowspan=6, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (26, 0), rowspan=6, colspan=6, fig=fig)

-             ax.plot(t, self['Patch2022']['l_s'][:, 'pRv0'])

? ----

+         ax.plot(t, self['Patch2022']['l_s'][:, 'pRv0'])

-             ax.plot(t, self['Patch2022']['l_s'][:, 'pRa0'])

? ----

+         ax.plot(t, self['Patch2022']['l_s'][:, 'pRa0'])

-             ax.spines[['top', 'right']].set_visible(False)

? ----

+         ax.spines[['top', 'right']].set_visible(False)

-             ax.spines['bottom'].set_position(('outward', 5))

? ----

+         ax.spines['bottom'].set_position(('outward', 5))

-             ax.set_ylim(lim_Ls)

? ----

+         ax.set_ylim(lim_Ls)

-             ax.set_ylabel('Sarcomere\nlength [$\mu$m]')

? ----

+         ax.set_ylabel('Sarcomere\nlength [$\mu$m]')

-             ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_left, 0.5)

-     

+ 

-             ax = plt.subplot2grid(grid_size, (26, 6), rowspan=6, colspan=6, fig=fig)

? ----

+         ax = plt.subplot2grid(grid_size, (26, 6), rowspan=6, colspan=6, fig=fig)

-             ax.plot(t, self['Patch2022']['l_s'][:, 'pLv0'])

? ----

+         ax.plot(t, self['Patch2022']['l_s'][:, 'pLv0'])

-             ax.plot(t, self['Patch2022']['l_s'][:, 'pSv0'])

? ----

+         ax.plot(t, self['Patch2022']['l_s'][:, 'pSv0'])

-             ax.plot(t, self['Patch2022']['l_s'][:, 'pLa0'])

? ----

+         ax.plot(t, self['Patch2022']['l_s'][:, 'pLa0'])

-             ax.spines[['top', 'left']].set_visible(False)

? ----

+         ax.spines[['top', 'left']].set_visible(False)

-             ax.spines['bottom'].set_position(('outward', 5))

? ----

+         ax.spines['bottom'].set_position(('outward', 5))

-             ax.yaxis.set_ticks_position('right')

? ----

+         ax.yaxis.set_ticks_position('right')

-             ax.yaxis.set_label_position('right')

? ----

+         ax.yaxis.set_label_position('right')

-             ax.set_ylim(lim_Ls)

? ----

+         ax.set_ylim(lim_Ls)

-             ax.set_ylabel('Sarcomere\nlength [$\mu$m]')

? ----

+         ax.set_ylabel('Sarcomere\nlength [$\mu$m]')

-             ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

? ----

+         ax.yaxis.set_label_coords(ylabel_x_right, 0.5)

-     

+ 

-             # ax.set_xlabel('Time [ms]')

? ----

+         # ax.set_xlabel('Time [ms]')

-             # ax.xaxis.set_label_coords(0, -0.3)

? ----

+         # ax.xaxis.set_label_coords(0, -0.3)

-     

-     

+ 

+ 

-             # Plot TriSeg

? ----

+         # Plot TriSeg

-             titles = ['Pre-A', 'Onset QRS', 'Peak LV \n pressure', 'AV close']

? ----

+         titles = ['Pre-A', 'Onset QRS', 'Peak LV \n pressure', 'AV close']

-             idx = [0,

? ----

+         idx = [0,

-                    np.argmax(np.diff(self['Patch2022']['C'][:, 'pLv0'])>0),

? ----

+                np.argmax(np.diff(self['Patch2022']['C'][:, 'pLv0'])>0),

-                    np.argmax(self['Cavity']['p'][:, 'cLv']),

? ----

+                np.argmax(self['Cavity']['p'][:, 'cLv']),

-                    len(t) - 1 - np.argmax(

? ----

+                len(t) - 1 - np.argmax(

-                        np.diff(self['Valve2022']['q'][:, 'LvSyArt'][::-1])>0)

? ----

+                    np.diff(self['Valve2022']['q'][:, 'LvSyArt'][::-1])>0)

-                    ]

? ----

+                ]

-     

+ 

-             for i in range(4):

? ----

+         for i in range(4):

-                 ax = plt.subplot2grid(grid_size, (26, 16+4*i),

? ----

+             ax = plt.subplot2grid(grid_size, (26, 16+4*i),

-                                       rowspan=5, colspan=4, fig=fig)

? ----

+                                   rowspan=5, colspan=4, fig=fig)

-                 triseg2022(self, ax, idx[i])

? ----

+             triseg2022(self, ax, idx[i])

-                 ax.spines[['top', 'right', 'bottom', 'left']].set_visible(False)

? ----

+             ax.spines[['top', 'right', 'bottom', 'left']].set_visible(False)

-                 ax.set_xticks([])

? ----

+             ax.set_xticks([])

-                 ax.set_yticks([])

? ----

+             ax.set_yticks([])

-                 plt.xlabel(titles[i], fontsize=12)

? ----

+             plt.xlabel(titles[i], fontsize=12)

-     

+ 

-             # Plot settings

? ----

+         # Plot settings

-             plt.subplots_adjust(

? ----

+         plt.subplots_adjust(

-                 top=0.96,

? ----

+             top=0.96,

-                 bottom=0.05,

? ----

+             bottom=0.05,

-                 left=0.075,

? ----

+             left=0.075,

-                 right=0.98,

? ----

+             right=0.98,

-                 hspace=5,

? ----

+             hspace=5,

-                 wspace=0.5)

? ----

+             wspace=0.5)

-             plt.draw()

? ----

+         plt.draw()

-     

+ 

-             # Plot MMode

? ----

+         # Plot MMode

-             ax_mmode = plt.subplot2grid(grid_size, (17, 17),

? ----

+         ax_mmode = plt.subplot2grid(grid_size, (17, 17),

-                                   rowspan=8, colspan=15, fig=fig)

? ----

+                               rowspan=8, colspan=15, fig=fig)

-             circadapt.plot.triseg.mmode(self, ax_mmode)

? ----

+         circadapt.plot.triseg.mmode(self, ax_mmode)

-             ax_mmode.axhline(0, c='k', ls='--')

? ----

+         ax_mmode.axhline(0, c='k', ls='--')

-             ax_mmode.spines[['top', 'right']].set_visible(False)

? ----

+         ax_mmode.spines[['top', 'right']].set_visible(False)

-     

+ 

-             # Plot Y

? ----

+         # Plot Y

-             # ax_mmode = plt.subplot2grid(grid_size, (17, 25),

? ----

+         # ax_mmode = plt.subplot2grid(grid_size, (17, 25),

-             #                       rowspan=8, colspan=7, fig=fig)

? ----

+         #                       rowspan=8, colspan=7, fig=fig)

-             ax_mmode.plot(t, self['TriSeg2022']['Y']*1e3 * np.array([[1, -1]]), c='k')

? ----

+         ax_mmode.plot(t, self['TriSeg2022']['Y']*1e3 * np.array([[1, -1]]), c='k')

-             ax_mmode.spines[['top', 'right']].set_visible(False)

? ----

+         ax_mmode.spines[['top', 'right']].set_visible(False)

-             plt.ylabel('MMode and Y [mm]')

? ----                                      -

+         plt.ylabel('MMode and Y [mm]')
-  
